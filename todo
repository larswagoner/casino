-create homescreen 
	-start game
	-get url

- json
    - find best way to organize cards 


- Websockets
	-connect to server
		-first response needs clientID: guid
	-create a game
		-method: CREATE
		-clientID: guid
	
	-Save state in Redis database

	-join game
		method: join
		clientID: guid
		gameID: guid

	-wait for all players to be ready

	-play -- FAST
		method: play
		clientID: guid
		gameID: guid
		game: ...

	-broadcast state:
		after x amount of time 
		server responds in batch to all clients
		method: update
		game: ...



- Rebuild entire game into JS client
	look at how to use classes/objects for recreating casino.py


- front end 
    figure out images, graphics, HTML CSS JS
	use image objects created in .json files
	think of how to drag and drop cards
	- maybe look at p5 ?
		-cool animations and graphics can be done with p5.js

- casino.py
    - clean da bish
    - style da bish
   	- Make game input and output as "efficient" as possible 
		- do we send all game data everytime? or just the changes?
    - commands[0] = int(commands[0])
    - get rid of collectValue?
    - split class function setup and game loop
    - fix while count game loop


MAKE DOCUMENTATION in README

ncurses 

- Proper terminal display
- Documentation
- tidy up function and var names
- get rid of collectValue
- change casino.py at the endddddd

Errors:

	- Illegal move (something you can't do)
	- Invalid Command (built instead of build)
    - general Error (debugging)
    - Range (out of range)
	

FINAL TOUCHES:
	- Write README (experience coding, instructions)
	- [DONE]Counting 
	- Aesthetic (single quotes, even spacing, change function names, logical ordering of functions)
	- Everything in Print object
	- Add to classes.py, functions.py, game.py
	- Add backdoor input (show score, compliment me )